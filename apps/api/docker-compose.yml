services:
  codetector-api:
    # For local development, use build
    # build:
    #   context: ../../
    #   dockerfile: apps/api/Dockerfile
    #   target: runner
    # For production deployment, use image from Docker Hub
    image: ${DOCKER_USERNAME}/codetector-api:latest
    container_name: codetector-api
    ports:
      - "${PORT:-3001}:3001"
    environment:
      # GitHub Configuration
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_PRIVATE_KEY_BASE64=${GITHUB_PRIVATE_KEY_BASE64}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      
      # Database Configuration
      - CODETECTOR_DB=${CODETECTOR_DB}
      
      # Application Configuration
      - PORT=${PORT:-3001}
      - NODE_ENV=${NODE_ENV:-production}
      
      # Clerk Authentication
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      
      # Redis Configuration
      - REDIS_URL=${REDIS_URL}
      
      # E2B Sandbox Configuration
      - E2B_API_KEY=${E2B_API_KEY}
      - E2B_SANDBOX_TEMPLATE=${E2B_SANDBOX_TEMPLATE}
      
      # Google API Configuration
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      
      # SMTP Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_SERVICE=${SMTP_SERVICE}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    
    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
      
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Security options
    security_opt:
      - no-new-privileges:true
    
    # Network configuration
    networks:
      - codetector-network

  # Optional: Redis service if you want to run Redis locally
  # Uncomment if you don't have external Redis
  # redis:
  #   image: redis:7-alpine
  #   container_name: codetector-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   networks:
  #     - codetector-network

  # Optional: MongoDB service if you want to run MongoDB locally
  # Uncomment if you don't have external MongoDB
  # mongodb:
  #   image: mongo:7
  #   container_name: codetector-mongodb
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
  #     - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-codetector_ai}
  #   volumes:
  #     - mongodb_data:/data/db
  #   restart: unless-stopped
  #   networks:
  #     - codetector-network

networks:
  codetector-network:
    driver: bridge

# Uncomment if using local services
# volumes:
#   redis_data:
#   mongodb_data: